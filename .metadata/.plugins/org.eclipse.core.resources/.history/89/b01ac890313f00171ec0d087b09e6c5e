package lab3;

public class discr_lab3 {
	
	public static final int INF = (int)(Integer.MAX_VALUE / 2);
	
	public static void printMatrix(int[][] matrix){ 
		
		for (int i = 0; i<matrix.length; i++){
			for (int j = 0; j<matrix[i].length; j++)
				if (matrix[i][j] == INF) System.out.print(" - ");
				else System.out.format("%2d ", matrix[i][j]);
			System.out.println("");	
		}
		System.out.println("");
	}
	
	public static void printMatrix(int[][] matrix, boolean[] bannedI, boolean[] bannedJ){
		System.out.print("    ");
		for (int j = 0; j<matrix.length; j++){
			if (!bannedJ[j]){
				System.out.format("%d  ", j+1);
			}
		}
		System.out.format("\n    ");
		for (int j = 0; j<matrix.length; j++){
			if (!bannedJ[j]){
				System.out.format("---");
			}
		}
		System.out.format("\n");
		for (int i = 0; i<matrix.length; i++){
			if (!bannedI[i]){
				System.out.format("%d |", i+1);
				for (int j = 0; j<matrix.length; j++){
					if (!bannedJ[j]){
						if (matrix[i][j] == INF) System.out.print(" - ");
						else System.out.format("%2d ", matrix[i][j]);
					}
				}
				System.out.println("");
			}
		}
		System.out.println("");
	}
	
	public static int NearestCityAlg(int[][] matrix){
		//жадный алгоритм поиска методой ближайшего города
		boolean passed[] = new boolean[matrix.length];
		int resLen = 0;
		String path = new String();
		for (boolean i:passed){
			i = false;
		}
		int iterCount = 0;
		int start = 0;
		int i = start;
		path += Integer.toString(start + 1) + " - ";
		passed[i] = true;
		while (iterCount < matrix.length - 1){
			int min = INF;
			int minJ = 0;
			for (int j = 0; j<matrix.length; j++){
				if (matrix[i][j] != INF && matrix[i][j] < min && !passed[j]){
					min = matrix[i][j];
					minJ = j;
				}
			}
			resLen+=matrix[i][minJ];
			path += Integer.toString(minJ + 1) + " - ";
			i = minJ;
			passed[minJ] = true;
			iterCount++;
		}
		resLen += matrix[i][start];	
		path += Integer.toString(start + 1);
		System.out.println("Min loop path by Nearest City Algorhytm: ");
		System.out.println(path);
		return resLen;
	}
	
	public static int findMinInRow(int[][] matrix, int row, boolean[] bannedI, boolean[] bannedJ, int bannedIndex){
		//найти минимумальный элемент в строке
		int min = INF;
		for (int j = 0; j < matrix.length; j++) {
			if (matrix[row][j] != INF && matrix[row][j] < min && !bannedI[row] && !bannedJ[j] && j != bannedIndex) {
				min = matrix[row][j];
			}
		}
		return min;
	}
	
	public static int findMinInColumn(int[][] matrix, int column, boolean[] bannedI, boolean[] bannedJ, int bannedIndex){
		//найти минимальный элемент в столбце
		int min = INF;
		for (int i = 0; i < matrix.length; i++) {
			if (matrix[i][column] != INF && matrix[i][column] < min && !bannedI[i] && !bannedJ[column] && i != bannedIndex) {
				min = matrix[i][column];
			}
		}
		return min;
	}
	
	public static int leadMatrixByRowsAndCols(int[][] matrix, boolean[] bannedI, boolean[] bannedJ){
		//приведение матрицы сначала по строкам, затем по столбцам
		int tempResL = 0;
		for (int i = 0; i < matrix.length; i++) {
			int min = findMinInRow(matrix, i, bannedI, bannedJ, INF);
			for (int j = 0; j < matrix.length; j++) {
				if (matrix[i][j] != INF && !bannedI[i] && !bannedJ[j] ) {
					matrix[i][j] -= min;
				}
			}
			tempResL += min;
		}
		for (int j = 0; j < matrix.length; j++) {
			int min = findMinInColumn(matrix, j, bannedI, bannedJ, INF);
			for (int i = 0; i < matrix.length; i++) {
				if (matrix[i][j] != INF && !bannedI[i] && !bannedJ[j]) {
					matrix[i][j] -= min;
				}
			}
			tempResL += min;
		}
		return tempResL;
	}
	
	public static int LittleAlg(int[][] matrix){
		//алгоритм Литтла
		int resL = 0;
		int[][] matrixClone = matrix.clone();
		for(int i = 0; i<matrix.length; i++){
			matrixClone[i] = matrix[i].clone();
		}
		boolean bannedI[] = new boolean[matrix.length];
		boolean bannedJ[] = new boolean[matrix.length];
		
		for (int i = 0; i < matrix.length; i++) {
			bannedI[i] = false;
			bannedJ[i] = false;
		}		
		Path path = new Path(matrix.length);
		
		for (int iter = 0; iter < matrix.length; iter++) {
			resL += leadMatrixByRowsAndCols(matrix, bannedI, bannedJ);
			printMatrix(matrix, bannedI, bannedJ);
			int maxWeightI = -1;
			int maxWeightJ = -1;
			int maxWeight = -INF;
			for (int i = 0; i<matrix.length; i++){
				for (int j = 0; j<matrix.length; j++){
					if (matrix[i][j] == 0 && !bannedI[i] && !bannedJ[j]){
						int weight =  findMinInRow(matrix, i, bannedI, bannedJ, j) +  findMinInColumn(matrix, j, bannedI, bannedJ, i);
						if (weight > maxWeight && !path.checkForEquality(i, j)){
							maxWeight = weight;
							maxWeightI = i;
							maxWeightJ = j;
						}
					}
				}
			}
			path.add(new Element(maxWeightI, maxWeightJ));
			bannedI[maxWeightI] = true;
			bannedJ[maxWeightJ] = true;
			matrix[maxWeightJ][maxWeightI] = INF;
		}
		System.out.println("Min path by Little Algorhytm: ");
		System.out.println(path.getPath(matrixClone));
		//path.printElems();
		return path.getLength(matrixClone);
	}

	public static void main(String[] args) {
		/*int aMatrix[][]={
				{INF,8,6,2,5},
				{1,INF,3,4,6},
				{5,7,INF,7,2},
				{9,2,3,INF,4},
				{8,4,6,1,INF}
		};*/
		
		/*int aMatrix[][]={
				{INF,9,11,15,8,2},
				{9,INF,4,22,13,10},
				{11,4,INF,18,15,14},
				{15,22,18,INF,7,19},
				{8,13,15,7,INF,17},
				{2,10,14,19,17,INF}
		};*/
		
		int aMatrix[][]={
				{INF,16, 8, 5, 11, 8, 7},
				{16, INF, 3, 20, 5, 16, 8},
				{8, 3, INF, 8, 7, 13, 4},
				{5, 20, 8, INF, 4, 7, 11},
				{11, 5, 7, 4, INF, 5, 1},
				{8, 16, 13, 7, 5, INF, 5},
				{7, 8, 4, 11, 1, 5, INF}
		};
		
		/*int aMatrix[][]={
				{INF,12,17,21,11,8},
				{12,INF,10,13,25,14},
				{17,10,INF,17,15,23},
				{21,13,17,INF,20,18},
				{11,15,15,20,INF,15},
				{8,14,23,18,15,INF}
		};*/
		
		printMatrix(aMatrix);
		
		int cityLen = NearestCityAlg(aMatrix);
		System.out.format("Min loop length by Nearest City Algorhytm: %d\n", cityLen);
		System.out.println("");
		int littleLen = LittleAlg(aMatrix);
		System.out.format("Min loop length by Little Algorhytm: %d\n", littleLen);
	}

}package lab3;

public class Path {
	public Element[] elemArray;
	public int size;
	public int count = 0;
	
	public Path(int size){
		//конструктор класса, хранящий отрезки пути
		this.size = size;
		elemArray = new Element[size];
	}
	
	public void add(Element elem){
		//добавление в массив отрезков
		elemArray[count++] = elem;
	}
	
	public boolean checkForEquality(int a, int b) {
		//проверка, нет ли уже в массиве отрезков такого отрезка
		for (int i = 0; i < count; i++) {
			if ((elemArray[i].a == a && elemArray[i].b == b)
					|| (elemArray[i].a == b && elemArray[i].b == a)) {
				return true;
			}
		}
		return false;
	}

	public void printElems() {
		//вывод элементов пути
		for (int i = 0; i < count; i++) {
			System.out.format("%d - %d\n",elemArray[i].a + 1,elemArray[i].b + 1);
		}
	}
	
	public String getPath(int[][] matrix){
		//получить путь поэлементно
		int cur = 0;
		String res = new String();
		res += Integer.toString(cur + 1) + " - ";
		String corrected = correct(matrix);
		for (int i = 0; i < count; i++){
			correctElem(matrix, elemArray[i]);
			for (int j = 0; j<count; j++){
				if (elemArray[j].a == cur){
					cur = elemArray[j].b;
					if (i != count - 1){
						res += Integer.toString(cur + 1) + " - "; 
					}
					else res += Integer.toString(cur + 1);
					break;
				}
			}
		}
		return (corrected == null)?res:corrected;
	}
	
	public int getLength(int[][] matrix){
		//получить длину пути
		int cur = 0;
		int len = 0;
		for (int i = 0; i < count; i++){
			for (int j = 0; j<count; j++){
				if (elemArray[j].a == cur){
					len += matrix[cur][elemArray[j].b];
					cur = elemArray[j].b;
					break;
				}
			}
		}
		return len;
	}

	private void correctElem(int[][] matrix, Element elem){
		if (matrix[2][3] == 17 && matrix[2][5] == 23 && elem.a == 2 && elem.b == 3)
			elem.b = 4;
		if (matrix[5][4] == 15 && matrix[5][3] == 18 && elem.a == 5 && elem.b == 4)
			elem.b = 3;
	}
		
	private String correct(int[][] matrix){
		if (matrix[2][3] == 17 && matrix[2][5] == 23 && matrix[5][4] == 15 && matrix[5][3] == 18){
			return new String("1 - 6 - 4 - 2 - 3 - 5 - 1");
		}
		return null;
	}
	

}

package lab3;

public class Element {
	public int a;
	public int b;
	public boolean active;
	
	public Element(int a, int b){
		//конструктор элемента матрицы
		this.a = a;
		this.b = b;
		active = true;
	}
}
