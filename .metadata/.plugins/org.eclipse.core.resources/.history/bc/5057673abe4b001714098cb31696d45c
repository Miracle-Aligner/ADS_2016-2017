package lab6.array_linked_lists;
import lab6.Student;

/**
 * KPI- FPM - PZKS Course: Algorithms and Data Structures (2) Laboratory work 6
 * 
 * @author Olena Khomenko <br>
 * 
 *         Resizable-array. Implements List interface <br>
 *         This class skeleton contains methods with TODO <br>
 *         Implement methods with TODO and write addition methods to support
 *         class functionality.
 * 
 *         Methods isEmpty, get, set operations run in constant time. <br>
 *         The add operation runs in amortized constant time. <br>
 *         All of the other operations run in linear time (roughly speaking).
 */

public class StudentArrayList implements StudentList {
	// The array buffer into which the elements of the ArrayList are stored. The
	// capacity of the ArrayList is the length of this array buffer

	private Student[] list;

	// Default initial capacity
	private final int defaultCapacity = 10;

	// the size of the array used to store the elements in the list
	private int capacity;

	// The size of the ArrayList (the number of elements it contains)
	private int size;

	/**
	 * Constructs an empty list with an initial capacity of ten
	 * 
	 */
	public StudentArrayList() {
		this.capacity = defaultCapacity;
		// TODO
		this.list = new Student[defaultCapacity];
		this.size = 0;
		this.capacity = defaultCapacity;
	}

	/**
	 * Constructs an empty list with the specified initial capacity
	 * 
	 * @param initialCapacity
	 *            the initial capacity of the list
	 */
	public StudentArrayList(int initialCapacity) {
		this.capacity = initialCapacity;
		this.list = new Student[initialCapacity];
		this.size = 0;
		this.capacity = initialCapacity;
	}

	public boolean add(Student element) {
		// TODO
		if (size == capacity)
        	resize(capacity * 2);
        list[size++] = element;
		return true;
	}
	
	private void resize (int capacity) {
        assert capacity >= size;
        Student[] temp = new Student [capacity];
        for (int i = 0; i < size(); i++) 
        {
            temp[i] = list[i];
        }
        list = temp;
        this.capacity = capacity;
    }

	public boolean add(int index, Student e) {
		
		if (size == capacity)
        	resize(capacity * 2);
		
		if (index >= size)
		{
			list[index] = e;
		}
		else
		{
			for (int i = size; i > index; i--)
			{
				list[i] = list[i - 1];
			}
			list[index] = e;
		}
		size++;

		return true;

	}

	public Student remove(int index) {
		// TODO
		if (index >= size)
        {
        	System.out.printf ("Remove error: index out of bounds.");
        	return null;
        }
		for (int i = index; i < size - 1; i++)
			list[i] = list[i+1];
        String del= queue[head];
        queue[head] = null;
        head++;
        if (head == queue.length) 
        	head = 0;
        // shrink size of array if necessary
        if (size > 0 && size == capacity / 4) 
        	resize (capacity / 2); 
        return del;
		return null;
	}

	@Override
	public boolean remove(Student element) {
		// TODO

		return false;
	}

	@Override
	public Student get(int index) {
		// TODO

		return null;
	}

	@Override
	public Student set(int index, Student element) {
		// TODO

		return null;
	}

	@Override
	public int size() {
		// TODO

		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO

		return false;
	}

}
