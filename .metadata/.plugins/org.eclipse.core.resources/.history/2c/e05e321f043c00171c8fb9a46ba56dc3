package bst;

/**
 * KPI- FPM - PZKS Course: Algorithms and Data Structures (2) Laboratory work 5
 * 
 * @author Olena Khomenko <br>
 * 
 *         Binary search tree based implementation StudentDictionary Keeps
 *         specified information about students
 * 
 *         each node contains id (number of student's card) and information
 *         about student (name, surname etc.)
 * 
 *         all search, delete and get operation use unique id as a key
 * 
 * @param <E>
 */

public class BSTree<E extends Student> implements StudentDictionary<E> {

	/**
	 * root of a tree
	 */
	private TreeNode<E> root;

	public BSTree() {

	}

	public BSTree(TreeNode<E> root) {
		this.root = root;
	}

	/**
	 * Returns true if this dictionary (binary search tree) contains an student
	 * for the specified cardNumber
	 * 
	 * @param cardNumber
	 *            cardNumber whose presence in this tree is to be tested
	 * @return true if this tree contains an student record for the specified
	 *         cardNumber
	 */
	@Override
	public boolean containsKey(int cardNumber) {
		if(cardNumber < 1) 
			return false;
		TreeNode<E> cur = this.root;
		while(cur != null) {
			if (cardNumber < cur.getKey()) 
				cur = cur.left;
			else if(cardNumber > cur.getKey()) 
				cur = cur.right;
			else 
				return true;
		}
		return false;
	}

	/**
	 * Returns the number of nodes in this tree.
	 * 
	 * @return he number of nodes in this tree
	 */
	@Override
	public int size() {
		BSTree<E> left = new BSTree <E> (this.root.left);
		BSTree<E> right = new BSTree <E> (this.root.right);
		int size = 1;                                     
		if (right != null) 
			size += right.size();        
		if (left != null) 
			size += left.size();
		return size;
	}

	/**
	 * Returns the student to which the specified cardNumber is associated, or
	 * null if this tree contains no student for the cardNumber.
	 * 
	 * @param cardNumber
	 *            the cardNumber whose associated student is to be returned
	 * @return the student with the specified cardNumber, or null if this tree
	 *         contains no student for the cardNumber or cardNumber is invalid
	 *         (negative or 0)
	 */
	@Override
	public E get(int cardNumber) {
		if(cardNumber < 1) 
			return null;
		TreeNode<E> cur = this.root;
		while(cur != null) {
			if (cardNumber < cur.getKey()) 
				cur = cur.left;
			else if(cardNumber > cur.getKey()) 
				cur = cur.right;
			else 
				return cur.st;
		}
		return null;
	}

	/**
	 * Removes the student for this cardNumber from this tree if present.
	 * 
	 * @param cardNumber
	 *            cardNumber for which student should be removed
	 * @return the previous student associated with cardNumber, or null if there
	 *         was no student for cardNumber.
	 */
	@Override
	public E remove(int cardNumber) {
		// del - is node to be deleted
		TreeNode<E> del = findDelNode (cardNumber); 
		if (del == null) 
			return null; 
		if (del.left == null) 
		{ 
			replaceSubTree(del, del.right); 
			return del.getValue(); 
		} 
		if (del.right == null) 
		{ 
			replaceSubTree(del, del.left); 
			return del.getValue(); 
		} 
		TreeNode<E> successor = del.right.getMinimum(); 
		if (successor.parent != del) 
		{ 
			replaceSubTree(successor, successor.right); 
			successor.setRight(del.right); 
			del.right.parent = successor; 
		} 
		
		replaceSubTree(del, successor); 
		successor.setLeft(del.left); 
		del.left.parent = successor; 
		
		return del.getValue(); 
	}

	// use this method when remove nodes
	private void replaceSubTree(TreeNode<E> u, TreeNode<E> v) {
		if (u == root) {
			root = v;
		} else {
			TreeNode<E> par = u.parent;
			if (par.isLeftChild(u)) {
				par.setLeft(v);
			} else {
				par.setRight(v);
			}
		}
	}
	
	private TreeNode<E> findDelNode (int cardNumber) { 
		TreeNode<E> cur = root; 
		while (cur != null) 
		{ 
			if (cardNumber < cur.getKey())
				cur = cur.left; 
			else if (cardNumber > cur.getKey())
				cur = cur.right; 
			else
				return cur; 
		}
		return null; 
	}
	
	/**
	 * Remove from a tree all students that satisfy specified criteria
	 * 
	 * @param removeCriteria
	 *            one or more criteria by witch students will be removed from
	 *            this tree
	 * @return number of students was be removed
	 */
	public int remove(String... removeCriteria) {
		// TODO
		// 1) find all nodes witch students satisfy specified removeCriteria
		// save in a list nodes to be removed
		// 2) call method remove (node) for each node in a list
		// 3) call size method to check successful removing
		// 4) return difference between old size and new size
		return 0;
	}

	/**
	 * Returns true if this dictionary contains no key-value mappings
	 * 
	 * @return true if this dictionary contains no key-value mappings
	 */
	@Override
	public boolean isEmpty() {
		return root == null;
	}

	/**
	 * Associates the specified student with the specified cardNumber in this
	 * dictionary. If the dictionary previously contained a mapping for the
	 * cardNumber, the old student is replaced by the specified student.
	 * 
	 * @param s
	 *            student to be associated with the specified cardNumber
	 * @return the previous student associated with cardNumber, or null if there
	 *         was no mapping for key
	 */
	public E put(Student s) {
        if (root == null) {
              root = new TreeNode<E>((E) s);
              return null;
        } else
              return root.add((E)s);
  }
	
	/**
	 * Outputs dictionary elements in table form
	 */

	@Override
	public void printDictionary() {
		// TODO
		// Invoke private recursive method for traversing a tree. Type of
		// traversing is defined in your variant
		// preorder: прямий порядок
		
		TreeNode<E> cur = this.root;
		System.out.println("DICK1");
		if (cur != null) {
		    BSTree<E> left = new BSTree<E>(this.root.left);
		    BSTree<E> right = new BSTree<E>(this.root.right);
		    
			System.out.println(cur.toString());
		    left.printDictionary();
		    right.printDictionary();
		}
		else
			System.out.println("DICK777");
		
	}

	class TreeNode <E extends Student> {
		/**
		 * information about student. Instance of class Student
		 */
		private E st;

		/**
		 * reference to the right node
		 */
		private TreeNode<E> right;

		/**
		 * reference to the left node
		 */
		private TreeNode<E> left;
		/**
		 * reference to the parent node
		 */

		private TreeNode<E> parent;

		public TreeNode(E e) {
			this.st = e;
			this.right = null;
			this.left = null;
			this.parent = null;
		}

		public TreeNode(E s, TreeNode<E> parent) {
			this.st = s;
			this.right = null;
			this.left = null;
			this.parent = parent;

		}
		
		public E add(E s) {
            if (s.getkey() == this.getKey()) {
            	E old = this.st;
            	this.st = s;
                return old;
            } else if (s.getkey() < this.getKey()) {
                  if (left == null) {
                        left = new TreeNode<E>(s);
                        return null;
                  } else
                        return left.add(s);
            } else if (s.getkey() > this.getKey()) {
                  if (right == null) {
                        right = new TreeNode<E>(s);
                        return null;
                  } else
                        return right.add(s);
            }
            return null;
		}

		public int getKey() {
			return st.getkey();

		}

		public E getValue() {
			return st;

		}

		public TreeNode<E> addLeftChild(E s) {
			TreeNode <E> setValue = new TreeNode <E> (s);
			setLeft(setValue);
			
			return setValue;
		}

		public TreeNode<E> addRightChild(E s) {
			TreeNode <E> setValue = new TreeNode <E> (s);
			setRight(setValue);
			
			return setValue;
		}

		public void setLeft(TreeNode<E> left) {
			this.left = left;
		}

		public void setRight(TreeNode<E> right) {
			this.right = right;
		}

		public boolean isLeftChild(TreeNode<E> node) {
			if (node.parent.getKey() > node.getKey())
				return true;
			
			return false;
		}

		public boolean isRightChild(TreeNode<E> node) {
			if (node.parent.getKey() > node.getKey())
				return true;
			// MAYBE add one more check to see if the child is right
			return false;
		}

		public TreeNode<E> getMinimum() {
			TreeNode<E> cur = this;
			while (cur.left != null) {
				cur = this.left;
			}
			// MAYBE cur.left????
			return cur;
		}
		
		public TreeNode<E> getMaximum() {
			TreeNode<E> cur = this;
			while (cur.right != null) {
				cur = this.right;
			}
			return cur;
		}

		@Override
		public String toString() {
			return st.toString();
		}

	}

}
