package lab6.max_priority_queue;

import lab6.Heap;
import lab6.MaxPriorityQueue;
import lab6.Student;
import lab6.StudentComparator;
import lab6.array_linked_lists.StudentArrayList;

/**
 * KPI- FPM - PZKS Course: Algorithms and Data Structures (2) Laboratory work 6
 * 
 * @author Olena Khomenko
 * 
 *         An unbounded max-priority queue based on a priority heap. The
 *         elements of the max-priority queue are ordered by a
 *         StudentComparator. The head of this queue is the greatest element
 *         with respect to the specified ordering. <br>
 *         A priority queue does not permit null elements. <br>
 *         Keeps elements of type Student.<br>
 */

public class HeapPriorityQueue implements MaxPriorityQueue, Heap {
	private StudentArrayList heap;
	private StudentComparator c;

	/**
	 * Creates a PriorityQueue with the default initial capacity and whose
	 * elements are ordered according to the specified comparator.
	 * 
	 * @param c
	 *            the comparator that will be used to order this priority queue
	 */

	public HeapPriorityQueue(StudentComparator c) {
		heap = new StudentArrayList();
		this.c = c;
	}

	@Override
	public void insert(Student s) {
		// Inserts the specified element s into heap
		if(!isEmpty())
			heap.add(s);
		else{
			heap.add(null);
			heap.add(s);
		}
		swim(size());
	}

	@Override
	public boolean isEmpty() {
		return size() == 0;
	}

	@Override
	public Student removeMax() {
		// removes and returns min-priority element of heap
		if (isEmpty())
		{
			System.out.println("removeMax() error: the heap is empty.");
			return null;
		}
		Student result = max();
		if (this.size() > 1)
		{
			heap.remove (result);
			sink(1);
		}
		heap.remove(size());
		return result;
	}

	@Override
	public Student max() {
		// returns min-priority element of heap
		if (heap.isEmpty())
			return null;
		Student max = heap.get(1);
		for (int i = 2; i <= heap.size(); i++) {
			if (c.compare(max, heap.get(i)) < 0) {
				max = heap.get(i);
			}
		}
		return max;
	}

	@Override
	public int size() {
		return heap.size() - 1;
	}

	@Override
	public void swim(int index) {
		if (index > 1)
		{
			int par = getParent(index);
			System.out.printf("INDEX: %d\n PAR: %d\n",  index, par);
			if(c.compare(heap.get(index), heap.get(par)) > 0)
			{
				swap(index, par);
				swim(par);
			}
		}
	}

	@Override
	public void sink(int index) {
		int l = getLeft(index);
		int r = getRight(index);
		int largest;
		if (l <= heap.size() && c.compare(heap.get(l), heap.get(r)) > 0)
			largest = l;
		else
			largest = index;
		if (r <= heap.size() && c.compare(heap.get(r), heap.get(largest)) > 0)
			largest = r;
		if (largest != index)
		{
			swap(index, largest);
		}
		sink (largest);
	}
	
	private boolean less(int i, int j) {
	       return c.compare(heap.get(i-1), heap.get(j-1)) < 0;
	}

	private void swap(int i, int j) {
		Student swap = heap.get(i);
		heap.set(i, heap.get(j));
		heap.set(j, swap);
	}
	    
	@Override
	public int getParent(int index) {
		return index / 2;
	}

	@Override
	public int getLeft(int i) {
		return 2 * i;
	}

	@Override
	public int getRight(int i) {
		return 2 * i + 1;
	}

}
