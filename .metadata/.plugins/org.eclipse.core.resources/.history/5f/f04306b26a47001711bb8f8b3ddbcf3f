package bst;
import java.util.List;
import java.util.LinkedList;

/**
 * KPI- FPM - PZKS Course: Algorithms and Data Structures (2) Laboratory work 5
 * 
 * @author Olena Khomenko <br>
 * 
 *         Binary search tree based implementation StudentDictionary Keeps
 *         specified information about students
 * 
 *         each node contains id (number of student's card) and information
 *         about student (name, surname etc.)
 * 
 *         all search, delete and get operation use unique id as a key
 * 
 * @param <E>
 */

public class BSTree<E extends Student> implements StudentDictionary<E> {

	/**
	 * root of a tree
	 */
	private TreeNode<E> root;

	public BSTree() {

	}

	public BSTree(TreeNode<E> root) {
		this.root = root;
	}

	/**
	 * Returns true if this dictionary (binary search tree) contains an student
	 * for the specified cardNumber
	 * 
	 * @param cardNumber
	 *            cardNumber whose presence in this tree is to be tested
	 * @return true if this tree contains an student record for the specified
	 *         cardNumber
	 */
	@Override
	public boolean containsKey(int cardNumber) {
		if(cardNumber < 1) 
			return false;
		TreeNode<E> cur = this.root;
		while(cur != null) {
			if (cardNumber < cur.getKey()) 
				cur = cur.left;
			else if(cardNumber > cur.getKey()) 
				cur = cur.right;
			else 
				return true;
		}
		return false;
	}
	
	public boolean contains(Student s) {
		if(s.getCardNumber() < 1) 
			return false;
		TreeNode<E> cur = this.root;
		while(cur != null) {
			if (s.getCardNumber() < cur.getKey()) 
				cur = cur.left;
			else if(s.getCardNumber() > cur.getKey()) 
				cur = cur.right;
			else 
			{
				if (s.getCourse() == cur.getValue().getCourse() &&
					s.getSex().equals(cur.getValue().getSex()) &&
					s.getName().equals(cur.getValue().getName()) &&
					s.getSurname().equals(cur.getValue().getSurname()) &&
					s.getCity().equals(cur.getValue().getCity())){
					return true;
				}
			}
		}
		return false;
	}
	/**
	 * Returns the number of nodes in this tree.
	 * 
	 * @return he number of nodes in this tree
	 */
	@Override
	public int size() {
		BSTree<E> left = new BSTree <E> (this.root.left);
		BSTree<E> right = new BSTree <E> (this.root.right);
		int size = 1;                                     
		if (right != null) 
			size += right.size();        
		if (left != null) 
			size += left.size();
		return size;
	}

	/**
	 * Returns the student to which the specified cardNumber is associated, or
	 * null if this tree contains no student for the cardNumber.
	 * 
	 * @param cardNumber
	 *            the cardNumber whose associated student is to be returned
	 * @return the student with the specified cardNumber, or null if this tree
	 *         contains no student for the cardNumber or cardNumber is invalid
	 *         (negative or 0)
	 */
	@Override
	public E get(int cardNumber) {
		if(cardNumber < 1) 
			return null;
		TreeNode<E> cur = this.root;
		while(cur != null) {
			if (cardNumber < cur.getKey()) 
				cur = cur.left;
			else if(cardNumber > cur.getKey()) 
				cur = cur.right;
			else 
				return cur.st;
		}
		return null;
	}
	
	/**
	 * Remove from a tree all students that satisfy specified criteria
	 * 
	 * @param removeCriteria
	 *            one or more criteria by witch students will be removed from
	 *            this tree
	 * @return number of students was be removed
	 */
	public int remove(String... removeCriteria) {
		// 1) find all nodes witch students satisfy specified removeCriteria
		// save in a list nodes to be removed
		// 2) call method remove (node) for each node in a list
		// 3) call size method to check successful removing
		// 4) return difference between old size and new size
		return 0;
	}

	/**
	 * Returns true if this dictionary contains no key-value mappings
	 * 
	 * @return true if this dictionary contains no key-value mappings
	 */
	@Override
	public boolean isEmpty() {
		return root == null;
	}

	/**
	 * Associates the specified student with the specified cardNumber in this
	 * dictionary. If the dictionary previously contained a mapping for the
	 * cardNumber, the old student is replaced by the specified student.
	 * 
	 * @param s
	 *            student to be associated with the specified cardNumber
	 * @return the previous student associated with cardNumber, or null if there
	 *         was no mapping for key
	 */
	public E put(E s) {
        if (root == null) {
              root = new TreeNode<E>(s);
              return null;
        } else
              return root.add(s);
  }
	
	/**
	 * Outputs dictionary elements in table form
	 */

	@Override
	public void printDictionary() {
		// Invoke private recursive method for traversing a tree. Type of
		// traversing is defined in your variant
		// preorder: прямий порядок
		
		TreeNode<E> cur = this.root;
		if (cur != null) {
		    BSTree<E> left = new BSTree<E>(this.root.left);
		    BSTree<E> right = new BSTree<E>(this.root.right);
		    
			System.out.println(cur.toString());
		    left.printDictionary();
		    right.printDictionary();
		}
		
	}
	
	/**
	 * Removes the student for this cardNumber from this tree if present.
	 * 
	 * @param cardNumber
	 *            cardNumber for which student should be removed
	 * @return the previous student associated with cardNumber, or null if there
	 *         was no student for cardNumber.
	 */
	@Override
	public E remove(int cardNumber) {
		if (this.containsKey(cardNumber)) {
			if (root == null)
				return null;
			else {
				if (root.getKey() == cardNumber) {
					TreeNode<E> nullNode = new TreeNode<E>(null);
					nullNode.left = root;
					E result = root.remove(cardNumber, nullNode);
					root = nullNode.left;
					return result;
				} else {
					return root.remove(cardNumber, null);
				}
			}
		}
		return null;
	}
	
	public E remove(TreeNode<E> node) {
		
			return node.remove();
	}
	
	public void removeByCriterion(int course, String sex, String city) {
		List<TreeNode<E>> list = new LinkedList<>();
		findNodesToDel (course, sex, city, list);
//		int listSize = list.size();
//		for (int i = 0; i < listSize; i++){
//			// this.remove(list.get(i).getKey());
//			System.out.printf("\nNumber: %s\n", list.get(0).getKey());
//			this.remove(list.get(i));
//			this.printDictionary();
//			System.out.println(" ");
		}
	}
	
	public void findNodesToDel (int course, 
								String sex, 
								String city, 
								List<TreeNode<E>> list) {
		
		TreeNode<E> cur = this.root;
		if (cur != null) {
		    BSTree<E> left = new BSTree<E>(this.root.left);
		    BSTree<E> right = new BSTree<E>(this.root.right);
		    if (cur.st.getSex().equalsIgnoreCase(sex))
		    {
		    	if (cur.st.getCourse() == course)
			    {
		    		if (cur.st.getCity().equalsIgnoreCase(city))
				    {
		    			this.remove(cur);
				    	list.add(cur);
				    }
			    }
		    }
		    left.findNodesToDel (course, sex, city, list);
		    right.findNodesToDel (course, sex, city, list);
		}
		
	}
	
	@SuppressWarnings("hiding")
	class TreeNode <E extends Student> {
		/**
		 * information about student. Instance of class Student
		 */
		private E st;

		/**
		 * reference to the right node
		 */
		private TreeNode<E> right;

		/**
		 * reference to the left node
		 */
		private TreeNode<E> left;
		/**
		 * reference to the parent node
		 */

		private TreeNode<E> parent;

		public TreeNode(E e) {
			this.st = e;
			this.right = null;
			this.left = null;
			this.parent = null;
		}

		public TreeNode(E s, TreeNode<E> parent) {
			this.st = s;
			this.right = null;
			this.left = null;
			this.parent = parent;

		}
		
		@Override
		public TreeNode <E> clone(){
			try{
				return (TreeNode<E>)super.clone();
			}
			catch(CloneNotSupportedException ex){
				throw new InternalError();
			}
		}
		
		public E add(E s) {
            if (s.getkey() == this.getKey()) 
            {
            	E old = this.st;
            	this.st = s;
                return old;
            } 
            else if (s.getkey() < this.getKey()) 
            {
                  if (left == null) 
                  {
                        left = new TreeNode<E>(s, this);
                        return null;
                  } 
                  else
                        return left.add(s);
            } 
            else if (s.getkey() > this.getKey()) 
            {
                  if (right == null) 
                  {
                        right = new TreeNode<E>(s, this);
                        return null;
                  } 
                  else
                        return right.add(s);
            }
            return null;
		}

		public int getKey() {
			return st.getkey();
		}

		public E getValue() {
			return st;

		}
		public TreeNode<E> getMinimum() {
			TreeNode<E> cur = this;
			while (cur.left != null) {
				cur = this.left;
			}
			return cur;
		}
		
		public TreeNode<E> getMaximum() {
			TreeNode<E> cur = this;
			while (cur.right != null) {
				cur = this.right;
			}
			return cur;
		}

		@Override
		public String toString() {
			return st.toString();
		}
		public E remove(int cardNumber, TreeNode<E> parent) {
			
			if (cardNumber < this.getKey()) 
			{
				if (left != null)
					return left.remove(cardNumber, this);
				else
					return null;
			} 
			else if (cardNumber > this.getKey()) 
			{
				if (right != null)
					return right.remove(cardNumber, this);
				else
					return null;
			} 
			else 
			{
				E tmp = this.st;
				if (left != null && right != null) 
				{
					this.st = right.getMinimum().getValue();
					right.remove(this.getKey(), this);
				} 
				else if (parent.left == this) 
				{
					if (left != null)
						parent.left = left;
					else
						parent.left = right;
				} 
				else if (parent.right == this) 
				{
					if (left != null)
						parent.right = left;
					else
						parent.right = right;
				}
				return tmp;
			}
		}
		
		public E remove() {
			E tmp = this.st;
			if (left != null && right != null) 
			{
				TreeNode <E> min = right.getMinimum();
				this.st = min.st;
				min.remove();
			} 
			else if (parent.left == this) 
			{
				
				if (left != null){
					parent.left = left;
				}
				else{
					parent.left = right;
				}
					
			} 
			else if (parent.right == this) 
			{
				if (left != null){
					parent.right = left;
				}
					
				else{
					parent.right = right;
				}
					
			}
			return tmp;
		}
	}
}
